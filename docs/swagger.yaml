basePath: /
definitions:
  models.Task:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple REST API for managing tasks.
  title: Todo List API
  version: "1.0"
paths:
  /:
    get:
      description: Returns a welcome message from the Todo List API
      produces:
      - text/plain
      responses:
        "200":
          description: Welcome to my Todo List API
          schema:
            type: string
      summary: Welcome message
      tags:
      - Default
  /health:
    get:
      description: Checks if the database connection is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: DB unreachable
          schema:
            type: string
      summary: Health check
      tags:
      - Health
  /tasks:
    get:
      description: Retrieve all tasks from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task and store it in the database
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Add a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid Task ID
          schema:
            type: string
        "404":
          description: Task Not Found
          schema:
            type: string
      summary: Delete a task
      tags:
      - tasks
    get:
      description: Retrieve a single task using its unique ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid Task ID
          schema:
            type: string
        "404":
          description: Task Not Found
          schema:
            type: string
      summary: Get a task by ID
      tags:
      - tasks
    put:
      description: Update a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid JSON
          schema:
            type: string
      summary: Update a task
      tags:
      - tasks
schemes:
- http
swagger: "2.0"
